//
// Copyright 2024 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.PicoLLMActivationRefusedError = exports.PicoLLMActivationThrottledError = exports.PicoLLMActivationLimitReachedError = exports.PicoLLMActivationError = exports.PicoLLMRuntimeError = exports.PicoLLMInvalidStateError = exports.PicoLLMKeyError = exports.PicoLLMStopIterationError = exports.PicoLLMInvalidArgumentError = exports.PicoLLMIOError = exports.PicoLLMOutOfMemoryError = exports.PicoLLMError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class PicoLLMError extends Error {
    _message;
    _messageStack;
    constructor(message, messageStack = []) {
        super(PicoLLMError.errorToString(message, messageStack));
        this._message = message;
        this._messageStack = messageStack;
    }
    get message() {
        return this._message;
    }
    get messageStack() {
        return this._messageStack;
    }
    static errorToString(initial, messageStack) {
        let msg = initial;
        if (messageStack.length > 0) {
            msg += `: ${messageStack.reduce((acc, value, index) => acc + '\n  [' + index + '] ' + value, '')}`;
        }
        return msg;
    }
}
exports.PicoLLMError = PicoLLMError;
class PicoLLMOutOfMemoryError extends PicoLLMError {
}
exports.PicoLLMOutOfMemoryError = PicoLLMOutOfMemoryError;
class PicoLLMIOError extends PicoLLMError {
}
exports.PicoLLMIOError = PicoLLMIOError;
class PicoLLMInvalidArgumentError extends PicoLLMError {
}
exports.PicoLLMInvalidArgumentError = PicoLLMInvalidArgumentError;
class PicoLLMStopIterationError extends PicoLLMError {
}
exports.PicoLLMStopIterationError = PicoLLMStopIterationError;
class PicoLLMKeyError extends PicoLLMError {
}
exports.PicoLLMKeyError = PicoLLMKeyError;
class PicoLLMInvalidStateError extends PicoLLMError {
}
exports.PicoLLMInvalidStateError = PicoLLMInvalidStateError;
class PicoLLMRuntimeError extends PicoLLMError {
}
exports.PicoLLMRuntimeError = PicoLLMRuntimeError;
class PicoLLMActivationError extends PicoLLMError {
}
exports.PicoLLMActivationError = PicoLLMActivationError;
class PicoLLMActivationLimitReachedError extends PicoLLMError {
}
exports.PicoLLMActivationLimitReachedError = PicoLLMActivationLimitReachedError;
class PicoLLMActivationThrottledError extends PicoLLMError {
}
exports.PicoLLMActivationThrottledError = PicoLLMActivationThrottledError;
class PicoLLMActivationRefusedError extends PicoLLMError {
}
exports.PicoLLMActivationRefusedError = PicoLLMActivationRefusedError;
function pvStatusToException(pvStatus, errorMessage, messageStack = []) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new PicoLLMOutOfMemoryError(errorMessage, messageStack);
        case pv_status_t_1.default.IO_ERROR:
            throw new PicoLLMIOError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new PicoLLMInvalidArgumentError(errorMessage, messageStack);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new PicoLLMStopIterationError(errorMessage, messageStack);
        case pv_status_t_1.default.KEY_ERROR:
            throw new PicoLLMKeyError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_STATE:
            throw new PicoLLMInvalidStateError(errorMessage, messageStack);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new PicoLLMRuntimeError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new PicoLLMActivationError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new PicoLLMActivationLimitReachedError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new PicoLLMActivationThrottledError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new PicoLLMActivationRefusedError(errorMessage, messageStack);
        default:
            // eslint-disable-next-line no-console
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new PicoLLMError(errorMessage);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map