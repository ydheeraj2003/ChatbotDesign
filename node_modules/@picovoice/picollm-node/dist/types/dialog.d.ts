export declare class Dialog {
    protected _history?: number;
    protected _system?: string;
    protected _humanRequests: string[];
    protected _llmResponses: string[];
    /**
     * Constructor.
     * @param history The number of latest back-and-forths to include in the prompt. Setting history
     * to `undefined` will embed the entire dialog in the prompt.
     * @param system Instruction to embed in the prompt for configuring the model's responses.
     */
    constructor(history?: number, system?: string);
    /**
     * Adds human's request to the dialog.
     * @param content Human's request.
     */
    addHumanRequest(content: string): void;
    /**
     * Adds LLM's response to the dialog.
     * @param content LLM's response.
     */
    addLLMResponse(content: string): void;
    /**
     * Creates a prompt string given parameters passed the constructor and dialog's content.
     * @returns Formatted prompt.
     */
    prompt(): string;
}
/**
 * Dialog helper for `gemma-2b-it` and `gemma-7b-it`.
 */
export declare class GemmaChatDialog extends Dialog {
    prompt(): string;
}
/**
 * Dialog helper for `llama-2-7b-chat`, `llama-2-13b-chat`, and `llama-2-70b-chat`.
 */
export declare class Llama2ChatDialog extends Dialog {
    prompt(): string;
}
/**
 * Dialog helper for `llama-3-8b-instruct` and `llama-3-70b-instruct`.
 */
export declare class Llama3ChatDialog extends Dialog {
    prompt(): string;
}
/**
 * Dialog helper for `mistral-7b-instruct-v0.1` and `mistral-7b-instruct-v0.2`.
 */
export declare class MistralChatDialog extends Dialog {
    prompt(): string;
}
/**
 * Dialog helper for `mixtral-8x7b-instruct-v0.1`.
 */
export declare class MixtralChatDialog extends MistralChatDialog {
}
/**
 * Dialog helper for `phi-2`. This is a base class, use one of the mode-specific subclasses.
 */
export declare class Phi2Dialog extends Dialog {
    protected _humanTag: string;
    protected _llmTag: string;
    constructor(humanTag: string, llmTag: string, history?: number, system?: string);
    prompt(): string;
}
/**
 * Dialog helper for `phi-2` `qa` mode.
 */
export declare class Phi2QADialog extends Phi2Dialog {
    constructor(history?: number, system?: string);
}
/**
 * Dialog helper for `phi-2` `chat` mode.
 */
export declare class Phi2ChatDialog extends Phi2Dialog {
    constructor(history?: number, system?: string);
}
export declare const DIALOGS: {
    [key: string]: typeof Dialog | {
        [key: string]: typeof Dialog;
    };
};
//# sourceMappingURL=dialog.d.ts.map